<?php

namespace App\Http\Controllers;

use App\Factories\ReportValidatorFactory;
use App\Services\ProGpsApiService;
use App\Jobs\ProcessReportJob;
use App\Models\Report;
use App\Services\ReportExportService;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Log;
use Illuminate\Validation\ValidationException;
use InvalidArgumentException;

class ReportController extends Controller
{
    public function __construct(protected ProGpsApiService $apiService, protected ReportExportService $reportExportService) {}

    // Get employees for the panel
    public function getEmployees(Request $request)
    {
        $departments = collect($this->apiService->getDepartments()['list'])->keyBy('id');
        $employees = collect($this->apiService->getEmployees()['list']);

        $groupedEmployees = $employees->groupBy(function ($employee) use ($departments) {
            return $departments[$employee['department_id']]['label'] ?? 'Sin Departamento';
        })->sortByDesc(function ($employees) {
            return count($employees);
        })->map(function ($employees, $name) use ($departments) {
            $firstEmployee = $employees->first();
            $departmentId = $firstEmployee['department_id'] ?? null;
            $color = 'cacaca';
            return [
                'id' => $departmentId,
                'name' => $name,
                'color' => $color,
                'employees' => array_values($employees->map(function ($employee) {
                    return [
                        'id' => $employee['id'],
                        'full_name' => $employee['first_name'] . " " . $employee['middle_name'] . " " . $employee['last_name'],
                    ];
                })->toArray()),
            ];
        })->values()->toArray();

        return response()->json($groupedEmployees);
    }

    // Get grouped trackers for the panel
    public function getGroupedTrackers(Request $request)
    {
        $trackers = collect($this->apiService->getTrackers()['list'])->keyBy('id');
        $groups = collect($this->apiService->getGroups()['list'])->keyBy('id');

        $groupedTrackers = $trackers->groupBy(function ($tracker) use ($groups) {
            return $groups[$tracker['group_id']]['title'] ?? 'Grupo Principal';
        })->sortByDesc(function ($trackers) {
            return count($trackers);
        })->map(function ($trackers, $name) use ($groups) {
            $firstTracker = $trackers->first();
            $groupId = $firstTracker['group_id'] ?? null;
            $color = $groups[$groupId]['color'] ?? 'cacaca';
            return [
                'id' => $groupId,
                'name' => $name,
                'color' => $color,
                'trackers' => array_values($trackers->toArray()),
            ];
        })->values()->toArray();

        return response()->json($groupedTrackers);
    }

    // Get list of reports generated by the user
    public function getListOfUsersGeneratedReports(Request $request)
    {
        $userId = $request->attributes->get('user')->user_id;
        $reports = Report::where('user_id', $userId)->orderBy('created_at', 'desc')->get();
        return response()->json($reports);
    }

    // Process the result of a report | Private Endpoint
    public function processResult(Request $request, $id)
    {
        $userId = $request->attributes->get('user')->user_id;

        $secret = $request->input('secret');
        $reportData = $request->input('data');

        // if ($secret !== $this->apiService->getSecretKey()) {
        //     return response()->json(['message' => 'Invalid secret key.'], 403);
        // }
        if ($secret !== "xd") {
            return response()->json(['message' => 'Invalid secret key.'], 403);
        }

        if (!$reportData || !is_array($reportData)) {
            return response()->json(['message' => 'Invalid report data.'], 400);
        }

        $report = Report::where('id', $id)->where('user_id', $userId)->first();
        if (!$report) return response()->json(['message' => 'Report not found.'], 404);

        // Update report with the result

        $jsonDir = storage_path('app/reports');
        $jsonPath = $jsonDir . "/report_{$id}.json";
        file_put_contents($jsonPath, json_encode($reportData, JSON_PRETTY_PRINT));

        $report->percent = 100; // Assuming the report is completed
        $report->file_path = $jsonPath;
        $report->save();
    }

    // Get status of report for polling
    public function getStatusOfReport(Request $request, $id)
    {
        $userId = $request->attributes->get('user')->user_id;

        $report = Report::where('id', $id)->where('user_id', $userId)->first();
        if (!$report) return response()->json(['message' => 'Report not found.'], 404);

        return response()->json([
            'id' => $report->id,
            'percent' => $report->percent,
            'status' => $report->percent < 100 ? 'processing' : 'completed',
        ]);
    }

    // Update report status | Private Endpoint
    public function updateReportStatus(Request $request, $id)
    {
        $userId = $request->attributes->get('user')->user_id;

        $report = Report::where('id', $id)->where('user_id', $userId)->first();
        if (!$report) return response()->json(['message' => 'Report not found.'], 404);

        $percent = $request->input('percent');
        if (!is_numeric($percent)) {
            return response()->json(['message' => 'Invalid percent value.'], 400);
        }

        $report->percent = (int)$percent;
        $report->save();

        return response()->json(['message' => 'Report status updated successfully.', 'report' => $report]);
    }

    // Retrieve report data
    public function retrieveReport(Request $request, $id)
    {
        $userId = $request->attributes->get('user')->user_id;

        $report = Report::where('id', $id)->where('user_id', $userId)->first();
        if (!$report) return response()->json(['message' => 'Report not found.'], 404);

        if ($report->percent < 100) {
            return response()->json(['message' => 'Report is still being processed. Please check back later.', 'percent' => $report->percent], 202);
        }

        if ($report->file_path && file_exists($report->file_path)) {
            return response()->json(json_decode(file_get_contents($report->file_path), true));
        }

        return response()->json(['message' => 'Report file not available. Something happened during the creation or storing process.'], 404);
    }

    // Delete report
    public function deleteReport(Request $request, $id)
    {
        $userId = $request->attributes->get('user')->user_id;

        $report = Report::where('id', $id)->where('user_id', $userId)->first();
        if (!$report) return response()->json(['message' => 'Report not found.'], 404);

        if ($report->file_path && file_exists($report->file_path)) {
            unlink($report->file_path);
        }

        $report->delete();

        return response()->json(['message' => 'Report deleted successfully.']);
    }

    // Generate report
    public function generateReport(Request $request)
    {
        try {
            $userId = $request->attributes->get('user')->user_id;

            $reportValidator = ReportValidatorFactory::make($request->input('report_type_id'));
            $reportValidator->validate($request->input('report_payload'));

            $payload = [
                'user_id' => $userId,
                'title' => $request->input('report_payload')['title'],
                'report_type_id' => $request->input('report_type_id'),
                'report_payload' => $request->input('report_payload'),
                'percent' => 0,
                'file_path' => null,
            ];

            $report = Report::create($payload);
            if (!$report) return response()->json(['message' => 'Failed to create report.'], 500);

            ProcessReportJob::dispatch($report);

            return response()->json([
                'message' => 'Report is being created. You can check the status later.',
                'report' => $report->toArray(),
            ], 201);
        } catch (ValidationException $e) {
            return response()->json(['errors' => $e->errors()], 422);
        } catch (InvalidArgumentException $e) {
            return response()->json(['message' => $e->getMessage()], 400);
        } catch (\Exception $e) {
            Log::error('Report generation failed', ['exception' => $e]);
            return response()->json(['message' => 'An error occurred while generating the report.'], 500);
        }
    }

    // Download Report on format XLS
    public function downloadReport(Request $request, $id)
    {
        $format = $request->query('format');
        if (!in_array($format, ['xlsx', 'pdf'])) return response()->json(['message' => 'Invalid format specified.'], 400);

        $userId = $request->attributes->get('user')->user_id;

        $report = Report::where('id', $id)->where('user_id', $userId)->first();
        if (!$report) return response()->json(['message' => 'Report not found.'], 404);

        if ($report->percent === -1) {
            return response()->json(['message' => 'Something happened with the report', 'percent' => $report->percent], 500);
        } else if ($report->percent < 100) {
            return response()->json(['message' => 'Report is still being processed. Please check back later.', 'percent' => $report->percent], 202);
        }

        if ($report->file_path && file_exists($report->file_path)) {
            if ($format === 'xlsx') {
                return $this->reportExportService->exportToExcel(json_decode(file_get_contents($report->file_path), true));
            } else if ($format === 'pdf') {
                return $this->reportExportService->exportToPDF(json_decode(file_get_contents($report->file_path), true), $report->report_type_id);
            }
        }

        return response()->json(['message' => 'Report file not available. Something happened during the creation or storing process.'], 404);
    }
}
